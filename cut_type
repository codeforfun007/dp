===gfg matrix multiplication ================================
#include<bits/stdc++.h>
using namespace std;

int solve2(vector<int>& v, vector<vector<int>>&dp)
{
    int n= v.size();
    
    for(int gap =1 ;gap<n;gap++)
    {
        for(int i=0 ,j=gap; j<n;j++,i++)
        {
            if(i+1 == j)
            {
                dp[i][j] = 0;
                continue;
            }
            int omin = INT_MAX;
            for(int cut = i+1 ;cut<j  ;cut++)
            {
                int left = dp[i][cut];
                
                int right = dp[cut][j];
                
                int my = left + v[cut]*v[i]*v[j] + right;
                
                if(my<omin)
                 omin = my;
            }
            
            dp[i][j] = omin;
        }
    }
    return dp[0][n-1];
}
int solve(int si , int ei , vector<int>& v  , vector<vector<int>> &dp)
{
    if(si+1 == ei)
      return 0;

    if(dp[si][ei] != -1)return dp[si][ei] ;
    
    
    int omin = INT_MAX;
    
    for(int cut = si +1  ;cut <ei ;cut++)
    {
        int left = solve(si , cut , v ,dp);
        
        int right = solve(cut , ei , v, dp);
        
        int mycost = left +  v[cut] *v[si]   *v[ei]    + right;
        
        
        if(mycost < omin)
         omin = mycost;
    }
    
    return dp[si][ei] = omin;
}
int main()
 {
	//code
	
	int t;
	cin>>t;
	
	while(t--)
	{
	    int n;
	    cin>>n;
	    
	    vector<int>v(n,-1);
	    for(int i=0 ;i<n ;i++)
	    cin>>v[i] ;
	    
	    vector<vector<int>>dp(n , vector<int>(n , -1));
	    cout<<solve2(v,dp)<<endl;
	}
	return 0;
}
========Brackets in Matrix Chain Multiplication =====================
#include<bits/stdc++.h>
using namespace std;

string solve(vector<int>& v)
{
    int n=v.size();
    
    vector<vector<string>>sdp(n , vector<string>(n,""));
    vector<vector<int>>dp(n, vector<int>(n));
    
    for(int gap= 1;gap<n ;gap++)
    {
        for(int si = 0,ei=gap ;ei<n ; si++,ei++)
        {
            if(si+1 == ei)
            {
                dp[si][ei] = 0;
        
                sdp[si][ei] = char(si+'A');
                continue; // i always for get the base case in tabulation be carefull
            }
            
            int omin=INT_MAX;
            string ans = "";
            
            for(int cut=si+1 ;cut<ei ;cut++)
            {
                int left = dp[si][cut];
                
                int right = dp[cut][ei];
                
                int my = left + v[si]*v[cut]*v[ei] +right;
                
                if(my<omin)
                {
                    omin = my;
                    ans ="(" + sdp[si][cut]+ sdp[cut][ei]+")";
                }
            }
            sdp[si][ei] = ans;
            dp[si][ei] = omin;
        }
    }
    return sdp[0][n-1];
}
int main()
 {
	//code
	int t;
	cin>>t;
	
	while(t--)
	{
	    int n;
	    cin>>n;
	    
	    vector<int>v(n);
	    for(int i=0 ; i<n ;i++)
	    cin>>v[i];
	    
	    string ans = solve(v);
	    cout<<ans<<endl;
	}
	return 0;
}
====================================================
